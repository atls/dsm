name: DSM
on:
  schedule:
    # every day at 6:00 UTC (9:00 MSK)
    - cron: "0 6 * * MON-FRI"
    
  workflow_dispatch:

jobs:
  dsm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.DSM_APP_ID }}
          private-key: ${{ secrets.DSM_APP_SECRET }}
          owner: ${{ github.repository_owner }}

      - name: Download DSM binary from release
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ github.repository }}
          latest: true
          fileName: dsm-launcher-x86_64-unknown-linux-musl.tar.gz
          extract: true

      - name: Run DSM launcher
        run: ./dsm-launcher
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_REPO_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO_NAME: ${{ github.event.repository.name }}

      - uses: actions/github-script@v7	
        with:	
          github-token: ${{ steps.app-token.outputs.token }}	
          script: |	
            const organization = `${{ github.repository_owner }}`;	
            const team_slugs = ['dsm'];	
            let body = function(){/*${{ steps.template.outputs.content }}*/}.toString().slice(13, -3);	
            const opts = github.rest.issues.listForRepo.endpoint.merge({	
              ...context.issue,	
              type: 'DSM',	
              state: 'open'	
            });	
            const members = [];	
            for (const team_slug of team_slugs) {	
              const teams_response = await github.request("GET /orgs/{org}/teams/{team_slug}/members", {	
                team_slug: team_slug,	
                org: organization	
              });	
              members.push(...teams_response.data.map((member) => member.login));	
            };	
            const issues = await github.paginate(opts);	
            for (const issue of issues) {	
              github.rest.issues.update({	
                owner: context.repo.owner,	
                repo: context.repo.repo,	
                issue_number: issue.number,	
                state: 'closed'	
              });	
            };	
            body += `\n\n<details>\n\n${members.map((member) => `@${member}`).join(', ')}\n\n</details>`;	
            await github.rest.issues.create({	
              title: `[DSM] ${new Date().toDateString()}`,	
              owner: context.repo.owner,	
              repo: context.repo.repo,	
              assignees: members,	
              type: 'DSM',	
              body,	
            });	
